<html data-lt-installed="true">

<head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <title>IFT3911 DM1</title>
    <style type="text/css">
        table {
            border: outset 2px black;
            border-collapse: collapse;
        }
        
        th {
            border-bottom: double 2px black;
        }
        
        td {
            border-bottom: solid 1px black;
        }
        
        .first_col {
            border-right: double 2px black;
        }
    </style>
</head>

<body>
    <h1 style="text-align: center;">
        IFT 3911 - Devoir 1</h1>
    <h2>
        Information générale</h2>
    <p>
        <span style="font-weight: bold;">Nom: </span>Alexandre Eyrolle
        <br>
        <span style="font-weight: bold;">Matricule: </span>4593
        <br>
        <span style="font-weight: bold;">Courriel: </span>alexandre.eyrolle@umontreal.ca
        <br>
        <span style="font-weight: bold;">temps mis: </span>40 heures
    </p>
    <p>
        <span style="font-weight: bold;">Nom: </span>Wassim Berrachedi
        <br>
        <span style="font-weight: bold;">Matricule: </span>2544
        <br>
        <span style="font-weight: bold;">Courriel: </span>wassim.berrachedi@umontreal.ca
        <br>
        <span style="font-weight: bold;">temps mis: </span>40 heures
    </p>
    <h2>
        Distribution des tâches</h2>
    <p>
        <span style="font-weight: bold;">Soumetteur: </span>Alexandre Eyrolle
    </p>
    <table cellpadding="7px">
        <thead>
            <tr>
                <th class="first_col">
                    Tâche
                </th>
                <th>
                    Alexandre
                </th>
                <th>
                    Wassim
                </th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td class="first_col">
                    Diagramme de classe
                </td>
                <td>
                    Diagramme conceptuel, operations, attributs (70%)
                </td>
                <td>
                    Diagramme de classe, operations, attributs (30%)
                </td>
            </tr>
            <tr>
                <td class="first_col">
                    Diagramme de séquence
                </td>
                <td>
                    Diagramme de recherche de vol (20%)
                </td>
                <td>
                    Diagramme Séquence Systéme, Reserver et Payer un Siege  (80%)
                </td>
            </tr>
            <tr>
                <td class="first_col">
                    Diagramme de paquet
                </td>
                <td>
                    Classes, associations (100%)
                </td>
                <td>
                    (0%)
                </td>
            </tr>
            <tr>
                <td class="first_col">
                    Contraintes OCL
                </td>
                <td>
                    Volet Admin (50%)
                </td>
                <td>
                    Volet Client (50%)
                </td>
            </tr>
            <tr>
                <td class="first_col">
                    Justification
                </td>
                <td>
                    Tache1, Tache2 (50%)
                </td>
                <td>
                    Tache 2, Tache 3(50%)
                </td>
            </tr>
        </tbody>
    </table>
    <h2>
        Hypothèses</h2>
    <p>
        Pour le diagramme de classe conceptuelle j'ai supposé qu'il fallait s'assurer de faire une conception qui assure une bonne cohésion entre les différents éléments qui composent un vol (siège, transport, hub etc), mais qui tout de même n'affecte
        pas trop le couplage lorsque l'on implique ces différents éléments pour les différents type de voyage possible. Également, car si l'on veut pouvoir coder un bon logiciel il faut anticiper la réutilisation, mais faciliter la modification du logiciel.
        J'ai également supposé qu'il fallait une manière de bien différentié les 2 types d'utilisateurs soulignés dans les consignes.

        <br><br>Pour ce qui en est du diagramme de classe logicielle, ma théorie était de continuer à construire sur ces généralisations et d'avoir des méthodes qui en profitent en utilsant le polymorphisme le plus possible, et également m'assurer que
        les attributs de chaque classe soient bien définis et mis dans les bonnes classes pour faciliter ce polymorphisme.
        
        <br><br>Concernant les diagramme de séquences système, nous les avons voulu les bâtir de manière très simple et selon les standards UML. 
        
        <br><br>Contrairement au diagramme séquences système, nous nous attendions à ce que les 3 diagramme de séquence devront requiérir beaucoup plus de précision.

        <br><br>Quand au diagramme de paquet j'ai supposé qu'il fallait s'assure avant tout de bien mettre ensemble les classes dont la cohésion et élevé et montrer les relations entre les différentes sections du logiciel
        <br><br>Pour ce qui relève des contraites OCL il y'a eu plusieurs hypothèses.

    </p>
    <h2>
        Tâche 1 :Diagramme de classe conceptuelle/Diagramme de séquence système</h2>
    <p>
        L'une des premières chose que nous avons garder en tête lors de la conception du diagramme de classe a été d'appliquer des généralisations de classe le plus possible pour les différentes classes et instances du logiciel. Notamment pour les Hub, Voyage,
        Transport et Compagnie. Le raisonnement derrière cela est que premièrement, toutes les différentes dérivations de ces classes pour les différents transports (Naval, Aérien, Ferroviaire) possède beaucoup d'attributs et opérations en commun et donc
        cela évite des répétitions inutile d'attribut. Deuxièmement, cela rend le logiciel plus flexible si l'on voudrait soit réutiliser certains de ces modules ou même si l'on voulait rajouter plus tard d'autres types de transport ou voyage.
        <br>Par exemple, il est facile de voir que le logiciel tel qu'il est implémenté permet à une plateforme utilisant le transport par automobile pourrait utiliserplusieurs de ces classes et attributs sans trop de soucis. D'autant plus que cela aide pour 
        le polymoprhisme des opérations où la plupart sont capable de prendre une sous-classe de celle généralisée et retourneront le résultat attendu. Également si un type de transport devait être retiré pour diverse raison 
        (exemple le logiciel est utilisé non pas pour un réseau de transport mondial mais plus local qui n'aurait pas certains transports), le logiciel pourrait tout de même fonctionner.
        <br> On a également décidé de faire en sorte que les compagnies aient leur propre liste de voyage et transport même si le système centrale possède déjà tous les voyages et transport possible. Cela facilite certaines recherches de
        Client et Admin où il ne faut pas parcourir des base de données entières pour ressortir des données, mais également, il semblerait logique qu'une compagnie possède déjà ce genre de liste, ce qui nous faciliterait le cout en terme de temps de recherche
        et stockage.
        
    <img src="Domaine/Diagramme Concept.png" alt="Diagramme de classe conceptuel" width="1850"> 
        <p><br></p>
        
        <br><br>Pour la partie sur les diagrammes de séquence système, nous nous sommes focusés sur les commandes les plus importantes dans un système de voyage. Évidemment, nous avons commencer par les 3 diagrammes demandé dans la tâche 2. Pour généraliser notre
        travail, nous avons fait que des diagrammes avec un acteur (Client/Admin) et des relations avec le Système. Nos diagrammes sont très simple et permetteront de facilement recréer ceci sur un diagramme de système étant donné leur facilité de
        compréhension. Pour les autres diagrammes fait nous avons choisi en priorité la création et suppression des différents Compagnie et Station.
    
    <h4>Diagramme Séquence système Payer un siège </h4>
    <img src="Domaine/Payer un siège.jpg" alt="Diagramme Séquence Système Payer un siège"> 
        <p><br></p>
    <h4>Diagramme Séquence système Rerserver un siège </h4>
    <img src="Domaine/Rerserver un siège.png" alt="Diagramme Séquence Système Rerserver un siège"> 
        <p><br></p>
    <h4>Diagramme Séquence système Vérification de voyage </h4>
    <img src="Domaine/Vérification de vols_trajet.png" alt="Diagramme Séquence Système Vérification de voyage"> 
        <p><br></p>
    <h4>Diagramme Séquence système Création Compagnie </h4>
    <img src="Domaine/Création Compagnie.jpg" alt="Diagramme Séquence Système Création Compagnie"> 
        <p><br></p>
    <h4>Diagramme Séquence système Suppression Compagnie </h4>
    <img src="Domaine/Suppression Compagnie.jpg" alt="Diagramme Séquence Système Suppression Compagnie"> 
        <p><br></p>
    <h4>Diagramme Séquence système Création Station </h4>
    <img src="Domaine/Création Station.jpg" alt="Diagramme Séquence Système Création Station"> 
        <p><br></p>
    <h4>Diagramme Séquence système Suppression Station </h4>
    <img src="Domaine/Suppression Station.jpg" alt="Diagramme Séquence Système Suppression Station"> 
        <p><br></p>

    </p>
    <ul>
        <li>Voici un <a href="https://github.com/Sethorvo/IFT3911-DM1/tree/main/Domaine">lien</a> vers les fichiers.</li>
    </ul>
    <h2>
        Tâche 2 :Diagramme de classe logiciel/Diagramme de Séquence</h2>
    <p>
        Notre solution a été d'abord de créé des classes générales pour chacun des composants d'un voyage, puis de les dériver en classe plus spécifique pour chaque type de voyage. Ainsi, on s'assure que chaque unité peut avoir une bonne cohésion, mais
        le couplage n'est pas trop affecté si certaines opérations font appel à plusieurs des composants. Nous nous sommes assuré aussi que la classe Système centralisée facilite l'échange d'information entre les utilisateurs et le reste du logiciel.
        Une des autres applications de la généralisation est la classe Section. Encore une fois, plusieurs sections possèdent des attributs en commun, mais avec la séparation en classes séparées on assure aussi que certaines valeurs sont respectés, 
        tel que tarif_p qui représente le pourcentage du tarif plein de la compagnie de transport décide ou encore le charactère qui représente la section. Pour les cabines de bateaux cela aide aussi d'avoir une capacité maximal pour éviter un problème 
        lors d'une réservation.
        <br> Nous avons aussi décidé de relié la classe Système à Siège afin de réduire le couplage lors d'une réservation d'un siège. Un siège compose déjà une section qui compose elle même l'avion, le logiciel assure déjà que le siège appartient à un
        avion auparavant donc il serait inutile de faire Système -> Voyage -> Transport -> Section -> Siège à chaque réservation.
        <br>Quand aux classes utilisateurs nous avons au contraire décidé d'éviter une génralisation en ayant une classe unique 'User' qui de dérive en Client et Admin, les raisons derrières sont que leurs interactions avec le Système sont très différentes
        et ne possède excepté leur nom, aucun attribut commun. Cela semble donc un peu superflu de créer ce type de classe. De plus, c'est aussi par soucis de sécurité, on ne voudrait pas qu'un bug dans le codage ou tout autre problème pourrait
        rendre certaines fonctionnalités de l'admin accessible au client. C'est aussi pour ça que toutes les fonctions de modifications, créations et suppressions sont associés avec la classe Admin et non Système. Tout
        de même nous avons tenté d'appliquer le polymorphisme aux opérations de l'Admin le plus possible afin de faciliter l'intéraction avec le Système si jamais des nouveaux types de transports venait à être ajoutés (ou même enlevé).
        <br>

    <img src="Design/Diagramme_de_Classe.jpg" alt="Diagramme de classe" width="1850"> 
        <p><br></p>
        
        
        <br><br> Concernant les diagrammes de séquence, nous avons fait de sorte à ce qu'il soit très précis et compréhensible.
        
        <h4>Diagramme Séquence Réserver un siège </h4>

        <br>Pour le diagramme Réserver un siège, nous avons pensé que la majorité du travail se ferait à l'intérieur du Système et que le Client aurait peu d'intéraction. Ainsi, le client demande simplement au Système de réserver un siège et celui-ci 
        recherche la liste de siège disponible pour un Voyage. Par la suite, le client choisi le siège qu'il désire réservé et le Système réserve celui-ci pour les 24 prochaines heures. Ceci est fait en créeant un timer dans la database.
        <br>

    <img src="Design/Diagramme_Sequence_ReserverUnSiege.jpg" alt="Diagramme Reserver un siège"> 
        <p><br></p>
        
        <h4>Diagramme Séquence Payer un siège </h4>
    
        <br>Pour le diagramme Payer un siège, étant donné la nature de la fonction, nous avons mis des certaines alternatives. Tout d'abord le client choisi l'option de payer son siège avec son numéro de Réservation que le Système vérifie la validité 
        à l'aide de la base de donnée. Si celui-ci est invalide, un message d'erreur est retourné au client. Dans le cas contraire, le Système cherche le prix du Siège et demande au client de fournir ses informations personnels dont sa carte de crédit.
        Finalement, le Système vérifie l'authenticité de la carte de crédit et si celle-ci est valide, le client reçoit sa facture et son ticket d'avion.
        <br>

    <img src="Design/Diagramme_Sequence_PayerUnSiege.jpg" alt="Diagramme Payer un siège"> 
        <p><br></p>
    
        <h4>Diagramme Séquence Vérification Vols/Lignes/Itinéraires </h4>
    
        <br>Pour le diagramme de Recherche d'un Voyage, ... TODO
    
        <br>

    <img src="Design/Diagramme_Sequence_RechercheVoyage.jpg" alt="Diagramme Recherche Voyage"> 
        <p><br></p>

    </p>
    <ul>
        <li>Voici un <a href="https://github.com/Sethorvo/IFT3911-DM1/tree/main/Design">lien</a> vers les fichiers.</li>
    </ul>
    <h2>
        Tâche 3 :Contraintes OCL</h2>
    <p>
        Pour les contraintes d'OCL nous nous sommes référés au matériel de classe pour les compléter. Pour les contraintes de Croisière et Vol, nous avons utilisé de simple égalité. Par exemple, inv:self.hub_D == self.hub_A, hub_D et hub_A qui
        décrive respectivement les hub de départ et d'arrivé, disent qu'une croisière à comme point de d'arrivé son point de départ.
        <br> Pour les contraintes de Section et Hub nous avons fait une référence à toutes les instances vu qu'elle s'applique à chacune d'entre elles.
        <br> Finalement, pour les contraintes de réservation et paiement nous avons utilisé les condition pre et post pour décrire leur différent états. Pour la réservation de siège, nous avons comme précondition chercher si le siège désiré et libre. Pour la
        postcondition nous avons appliqué que le résultat de la fonction est égale au numéro de réservation associé au siège. Pour ce qui est du paiement de siège, la précondition dit que la fonction est permise si le numéro de réservation qu'inscrit le client
        et le même que le siège. Pour la postcondition, nous settons que le siège n'est plus libre.
    </p> 
    
    <ul>
        <a href="https://github.com/Sethorvo/IFT3911-DM1/blob/7c2c0a95865436bba48e681861a2a6d5d17adcdc/Domaine/Contraintes%20OCL.txt">ContraintesOCL</a>
    </ul>


</body>

</html>
